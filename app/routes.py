from flask import render_template, flash, redirect, url_for, request, g, jsonify
from flask_babel import get_locale
from app import app, db
from app.email import send_password_reset_email
from app.forms import LoginForm, RegistrationForm, PostForm
from app.forms import EditProfileForm, ResetPasswordRequestForm, ResetPasswordForm
from app.models import User, Post
from app.translate import translate
from flask_login import current_user, login_user, logout_user, login_required
from werkzeug.urls import url_parse
from datetime import datetime
from guess_language import guess_language


# @ symbol indicates what is known as a decorator (i.e. @app.route, or @login_required):
#   - A decorator modifies the FN that follows it
#   - A common pattern with decorators is to use them to register FNs as callbacks for certain events.

# The @before_request decorator from Flask registers the decorated FN to be executed before the view FN
@app.before_request
def before_request():

    # The get_locale() function from Flask-Babel returns a locale object, but I just want to have the language code,
    # which can be obtained by converting the object to a string
    g.locale = str(get_locale())

    # Check that the user is logged-in
    if current_user.is_authenticated:
        # If user is logged in than update the last_seen field to the current time (remember only happens on page load)
        current_user.last_seen = datetime.utcnow()
        # Commit the db session, so change made above is written to the db (db.session.add is w/in user_loader FN)
        db.session.commit()


# the @app.route decorator creates an association between the URL given as an argument and the FN
# In this ex. there are three decorators (two of which
#   1. Associates the URL "/" to this FN.
#   2. Associates the URL "/index" to this FN.
#   3. Forces the user to be logged-in to be able to access a certain FN
#
# The first two decorators mean that when a browser requests either of these two URLs, Flask is going to invoke this FN
# and pass the return value of it back to the browser as a response. They also include the methods argument indicating
# that this particular function accepts GET and POST requests
#
# The third decorator checks within the User object associated with the browser and looks for the is_authenticated BOOL
#   - If set to TRUE than the user is allowed to see the page
#   - If set to FALSE than the user is redirected to the login page (org. page stored in NEXT to allow acc. redirect)
@app.route('/', methods=['GET', 'POST'])
@app.route('/index', methods=['GET', 'POST'])
@login_required
def index():
    form = PostForm()

    # This if statement handles the situation in which the user wishes to submit a new blog post (adding it the db)
    if form.validate_on_submit():

        # Each time a post is submitted, I run the text through the guess_language function to try to determine the
        # language. If the language comes back as unknown or if I get an unexpectedly long result, I play it safe and
        #  save an empty string to the database. I'm going to adopt the convention that any post that have the
        # language set to an empty string is assumed to have an unknown language.
        language = guess_language(form.post.data)
        if language == 'UNKNOWN' or len(language) > 5:
            language = ''

        post = Post(body=form.post.data, author=current_user, language=language)
        db.session.add(post)
        db.session.commit()

        # Display the success message and redirect/refresh to home page so user can see updated page with post
        flash('Your post is now live!')

        # It is a standard practice to respond to a POST request generated by a web form submission with a redirect.
        # This helps mitigate an annoyance with how the refresh command is implemented in web browsers. All the web
        # browser does when you hit the refresh key is to re-issue the last request. If a POST request with a form
        # submission returns a regular response, then a refresh will re-submit the form. Because this is unexpected,
        # the browser is going to ask the user to confirm the duplicate submission, but most users will not
        # understand what the browser is asking them. But if a POST request is answered with a redirect, the browser
        # is now instructed to send a GET request to grab the page indicated in the redirect, so now the last request
        # is not a POST request anymore, and the refresh command works in a more predictable way.
        #
        # This simple trick is called the Post/Redirect/Get pattern. It avoids inserting duplicate posts when a user
        # inadvertently refreshes the page after submitting a web form.
        return redirect(url_for('index'))

    # Get all posts from the current user and pass it as an argument to the html template view to be displayed
    #
    # The followed_posts method of the User class returns a SQLAlchemy query object that is configured to grab the
    # posts the user is interested in from the database. Calling all() on this query triggers its execution,
    # with the return value being a list with all the results.
    #
    # I end up with a structure similar to --> {'author':{'username': 'John'}, 'body': 'This is the body text'}
    #
    # Note: We are paginating the posts and to do so we must take the current page from the query string in the URL
    #       Additionally we must call the paginate method which can be called on any query object from Flask-SQLAlchemy
    #         It takes three arguments:
    #             1. The page number, starting from 1
    #             2. The number of items per page
    #             3. An error flag for bad queries (if true will return 404... if false it will return an empty list)
    #       The return value from paginate is a Pagination object.
    #       The items attribute of this object contains the list of items in the requested page

    page = request.args.get('page', 1, type=int)  # Arg 1: Query Variable, Arg 2: Default Value, Arg 3: D-TYPE (INT)
    posts = current_user.followed_posts().paginate(page, app.config['POSTS_PER_PAGE'], False)

    # Further Notes on PAGINATE class from SQL-Alchemy
    # An object constructed from the paginate class (such as 'page' constructed above) has many useful attributes in
    # addition to the items attribute. Four other useful attributes are shown below:
    #
    #      1.  has_next  :  True if there is at least one more page after the current one
    #      2.  has_prev  :  True if there is at least one more page before the current one
    #      3.  next_num  :  page number for the next page
    #      4.  prev_num  :  page number for the previous page
    #
    # With these four elements, I can generate next and prev page links and pass them to the templates for rendering:
    # The next_num and prev_num will work in concern with url_for to generate potential next/prev page urls
    #
    # One interesting aspect of the url_for() function is that you can add any keyword args to it, and if the names of
    # those args are not referenced in the URL directly, then Flask will include them in the URL as query arguments.
    #

    next_url = url_for('index', page=posts.next_num) if posts.has_next else None  # Conditional based on has_next
    prev_url = url_for('index', page=posts.prev_num) if posts.has_prev else None  # Conditional based on has_prev

    # render_template is a templating engine (Jinja2)
    #   - Just provide the name of the template and the variables
    #   - This will load the template you indicated and will pass the variables to the template as keyword arguments
    #   - In this case we are calling index.html & passing the string for title and array containing the posts
    return render_template('index.html',
                           title='Home Page', posts=posts.items, form=form, next_url=next_url, prev_url=prev_url)


# The methods argument included in this decorator app.route indicates that...
#   - this view function accepts GET and POST requests, overriding the default, which is to accept only GET requests.
#       - GET request  --> Return information to the client (the web browser in this case)
#       - POST request --> Typically used when the browser submits form data to the server
@app.route('/login', methods=['GET', 'POST'])
def login():
    # Checks to make sure the current_user is logged-in... if so than they shouldn't be here and redirect home
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    # Above in the imports the LoginForm() class was imported from forms.py and we are instantiating an object (form)
    form = LoginForm()

    # The form.validate_on_submit() method does all the form processing work. When the browser sends the GET request
    # to receive the web page with the form, this method is going to return False, so in that case the function skips
    # the if statement and goes directly to render the template in the last line of the function.
    #
    # When the browser sends the POST request as a result of the user pressing the submit button,
    # form.validate_on_submit() is going to gather all the data, run all the validators attached to fields,
    # and if everything is all right it will return True, indicating that the data is valid and can be processed by
    # the application. But if at least one field fails validation, then the function will return False, and that will
    # cause the form to be rendered back to the user, like in the GET request case. This is also where we render error
    # messages when validation fails.
    #
    # When form.validate_on_submit() returns True, the login view function calls two new functions, imported from
    # Flask. The flash() function is a useful way to show a message to the user. A lot of applications use this
    # technique to let the user know if some action has been successful or not.
    if form.validate_on_submit():
        # Return the matching user object resulting from a db query using the form username data
        user = User.query.filter_by(username=form.username.data).first()

        # If the function returns FALSE when checking the user entered password (or nothing is entered) flash is used
        # to display an error message to the user and to redirect/refresh the login page
        #
        # When the Flask Class's redirect FN is called, it returns a response object and redirects the user to another
        # target location with specified status code.
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))

        # This FN comes from Flask-Login & will register the user as logged in
        # This means that any future pages the user navigates to will have the current_user variable set to that user
        login_user(user, remember=form.remember_me.data)

        # If there is a next_page stored than the user will be redirected there... if not then to the index page
        next_page = request.args.get('next')
        if not next_page or url_parse(next_page).netloc != '':
            next_page = url_for('index')

        return redirect(next_page)

    # In this case we return the html template for the login screen along with the appropriate title and form data
    return render_template('login.html', title='Sign In', form=form)


# This is the FN for logging out that is associated with the /logout address request
# The logout_user() FN is from Flask-Login and will remove authentication and redirect to the home page
@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))


# This is the FN for registering that is associated with the /register address request
# FN accepts both GET & POST requests
# noinspection PyArgumentList
@app.route('/register', methods=['GET', 'POST'])
def register():
    # Check that user isn't logged in... if they are than get them off of this page (they shouldn't be here obv.)
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    # Above in the imports the RegistrationForm() class was imported and we are instantiating an object (form)
    form = RegistrationForm()

    # Validate the form submission as explained above
    if form.validate_on_submit():
        # Instantiate a user object from the User class with the username/email given from the form data
        user = User(username=form.username.data, email=form.email.data)

        # Update the password field of the user object using the password given from the form data
        user.set_password(form.password.data)

        # Add and commit the changes to the database
        db.session.add(user)
        db.session.commit()

        # Show the user a message letting them know that the operation was performed successfully
        flash('Congratulations, you are now a registered user!')

        # Redirect the user to the login screen so that they can use their newly created credentials to log in
        return redirect(url_for('login'))

    # Return the html for the register page is validation fails with the appropriate title and form
    return render_template('register.html', title='Register', form=form)


# This is the FN for viewing a user profile and is associated with a custom URL dependant upon the user (/user/<>)
# Login is obv. required for this page to be accessed
@app.route('/user/<username>')
@login_required
def user(username):
    # Return the matching user object resulting from a db query using the html passed username variable (first or 404)
    user = User.query.filter_by(username=username).first_or_404()

    # Get all posts from the current user and pass it as an argument to the html template view to be displayed
    #
    # The followed_posts method of the User class returns a SQLAlchemy query object that is configured to grab the
    # posts the user is interested in from the database. Calling all() on this query triggers its execution,
    # with the return value being a list with all the results.
    #
    # For more information on paginate and it's various attributes see the index route at the top of this file
    #
    # To get the list of posts from the user, I take advantage of the fact that the user.posts relationship is a
    # query that is already set up by SQLAlchemy as a result of the db.relationship() definition in the User model.
    #
    # Take this query and add an order_by() clause so that I get the newest posts first, and then do the pagination
    # exactly like I did for the posts in the index and explore pages. Note that the pagination links that are
    # generated by the url_for() function need the extra username argument (point back at the user profile page)
    page = request.args.get('page', 1, type=int)
    posts = user.posts.order_by(Post.timestamp.desc()).paginate(page, app.config['POSTS_PER_PAGE'], False)

    next_url = url_for('user', username=user.username, page=posts.next_num) if posts.has_next else None
    prev_url = url_for('user', username=user.username, page=posts.prev_num) if posts.has_prev else None

    # Return html (if not 404'd) for user.html passing the queried user object and the fake posts
    return render_template('user.html', user=user, posts=posts.items, next_url=next_url, prev_url=prev_url)


# This is the FN for editing a profile and is associated with the /edit_profile address
# This function accepts both HTTP GET & POST requests
# This page requires the user to be authenticated to be accessed
@app.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    # Above in the imports the EditProfileForm() class was imported and we are instantiating an object (form)
    form = EditProfileForm(current_user.username)  # We use the current_user.username to pass default text in form

    # Form validation as explained above
    if form.validate_on_submit():
        # Update the current_user username & about_me and commit the changes to the database and display confirmation
        current_user.username = form.username.data
        current_user.email = form.email.data
        current_user.about_me = form.about_me.data

        db.session.commit()
        flash('Your changes have been saved.')
        # Redirect to the edit profile page (passing the current_user) so that the user can see updated default fields
        return redirect(url_for('edit_profile'))

    # If form validation fails (but it is a GET request)
    elif request.method == 'GET':
        # Set the default form data (text that appears) to be the users current username and about me information
        form.username.data = current_user.username
        form.email.data = current_user.email
        form.about_me.data = current_user.about_me

    # If form validation fails (but it is a POST request) than re-render the edit_profile html passing approp. args
    return render_template('edit_profile.html', title='Edit Profile', form=form)


# The two FNs below could be combined and we pass some kind of action type (follow/unfollow) as an arg from URL
# This is the FN for following a user and is associated with the /follow/<username> path
# This page requires the user to be authenticated to be accessed
@app.route('/follow/<username>')
@login_required
def follow(username):
    # set the user variable to be the first returned match for the passed user (to be followed) arg
    user = User.query.filter_by(username=username).first()

    # If we can't find the user than display an error message and redirect to the home page
    if user is None:
        flash('User {} not found.'.format(username))
        return redirect(url_for('index'))

    # If we find that the desired user is actually ourselves than flash an error message and redirect to our user page
    if user == current_user:
        flash('You cannot follow yourself!')
        return redirect(url_for('user', username=username))

    # Call the follow module to update the database field and then commit the changes to memory
    current_user.follow(user)
    db.session.commit()

    # Display a success message and redirect the user to their appropriate user page
    flash('You are following {}!'.format(username))
    return redirect(url_for('user', username=username))


# This is the FN for un-following a user and is associated with the /unfollow/<username> path
# This page requires the user to be authenticated to be accessed
@app.route('/unfollow/<username>')
@login_required
def unfollow(username):
    # set the user variable to be the first returned match for the passed user (to be followed) arg
    user = User.query.filter_by(username=username).first()

    # If we can't find the user than display an error message and redirect to the home page
    if user is None:
        flash('User {} not found.'.format(username))
        return redirect(url_for('index'))

    # If we find that the desired user is actually ourselves than flash an error message and redirect to our user page
    if user == current_user:
        flash('You cannot unfollow yourself!')
        return redirect(url_for('user', username=username))

    # Call the unfollow module to update the database field and then commit the changes to memory
    current_user.unfollow(user)
    db.session.commit()

    # Display a success message and redirect the user to their appropriate user page
    flash('You are not following {}.'.format(username))
    return redirect(url_for('user', username=username))


# This is the FN for viewing the global stream of posts from all users and is associated with the /explore path
# This page requires the user to be authenticated to be accessed
@app.route('/explore')
@login_required
def explore():
    # Get all the posts from the post table ordered by timestamp
    # For notes on pagination see index route and/or flask documentation
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.timestamp.desc()).paginate(page, app.config['POSTS_PER_PAGE'], False)
    next_url = url_for('explore', page=posts.next_num) if posts.has_next else None
    prev_url = url_for('explore', page=posts.prev_num) if posts.has_prev else None
    # Return the home page html without the form argument being passed
    # The explore page should be identical except not limited to the user and his/her followed users
    # Additionally it should not contain the ability to write a post (no form)
    return render_template('index.html', title='Explore', posts=posts.items, next_url=next_url, prev_url=prev_url)


# This is the FN for sending a request to reset a users password (as such no login is required)
# It is associated with the /reset_password_request path
# This function accepts both HTTP GET & POST requests
@app.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    # Check to make sure that the user isn't logged in and has stumbled to this page... if so redirect to home page
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    # Import the appropriate form object that was defined in forms.py (ResetPasswordRequestForm())
    form = ResetPasswordRequestForm()

    # Check for validation on submit and if successful (if email entered exists) than send password reset email
    # Additionally we will display a success message and redirec the user to the login page & display errors (inherent)
    # If they fail validation than simply reload the current page
    if form.validate_on_submit():
        # set the user variable to be the first returned match for the passed user argument
        user = User.query.filter_by(email=form.email.data).first()

        if user:
            send_password_reset_email(user)

        # You may notice that the flashed message below is displayed even if the email provided by the user is unknown.
        # This is so that clients cannot use this form to figure out if a given user is a member or not.
        flash('Check your email for the instructions to reset your password')
        return redirect(url_for('login'))

    return render_template('reset_password_request.html', title='Reset Password', form=form)


# This is the FN called when a user clicks the password reset link from within their email
# This FN is associated with the /reset_password/<token> path (uses the token included in the sent email)
# As this function is being launched from an external site no authorization is required (not logged in)
# This function accepts both HTTP GET & POST requests
@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    # Check to make sure that the user isn't logged in and has stumbled to this page... if so redirect to home page
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    # determine who the user is by invoking the token verification method in the User class. This method returns the
    # user if the token is valid, or None if not. If the token is invalid I redirect to the home page.
    user = User.verify_reset_password_token(token)

    # If the token above is invalid than redirect the user to the homepage
    if not user:
        return redirect(url_for('index'))

    # If the token checked above is valid, present the user with a second form, in which the new password is requested
    # Import the appropriate form object that was defined in forms.py (ResetPasswordForm())
    form = ResetPasswordForm()

    # This form is processed in a way similar to previous forms, and as a result of a valid form submission,
    # I invoke the set_password() method of User to change the password, and then redirect to the login page,
    # where the user can now login. I also display a success message to communicate with the user a successful change
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash('Your password has been reset.')
        return redirect(url_for('login'))

    # If form fails to validate than refresh the page
    return render_template('reset_password.html', form=form)


# This is the FN called when a user wishes to translate a post from one language to another (it accepts only POST req)
# This function is associated with the /translate path and to access it the user must be authenticated
#
# An asynchronous (or Ajax) request is similar to the routes and view functions that I have created in the
# application, with the only difference that instead of returning HTML or a redirect, it just returns data,
# formatted as XML or more commonly JSON. Below you can see the translation view function, which invokes the
# Microsoft Translator API and then returns the translated text in JSON format
@app.route('/translate', methods=['POST'])
@login_required
def translate_text():
    return jsonify({'text': translate(request.form['text'],
                                      request.form['source_language'],
                                      request.form['dest_language'])})

# There is really no absolute rule as to when to use GET or POST. Since the client will be sending data I decided to
# use a POST request, as that is similar to the requests that submit form data.
#
# The request.form attribute is a dictionary that Flask exposes with all the data that has included in the submission.
# When I worked with web forms, I did not need to look at request.form because Flask-WTF does all that work for me,
# but in this case, there is no web form, so I have to access the data directly.
#
# In this function we invoke the translate() function from the previous section passing the three arguments directly
# from the data that was submitted with the request. The result is incorporated into a single-key dictionary,
# under the key text, and the dictionary is passed as an argument to Flask's jsonify() function, which converts the
# dictionary to a JSON formatted payload.
#
# The return value from jsonify() is the HTTP response that is going to be sent back to the client.
