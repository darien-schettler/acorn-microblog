from datetime import datetime, timedelta
import unittest
from app import create_app, db
from app.models import User, Post
from config import Config


# -------------------------------------------------- UNIT TESTS -----------------------------------------------------
#
# I've added four tests that exercise the password hashing, user avatar and followers functionality in the user model.
#
# The setUp() and tearDown() methods are special methods that the unit testing framework executes before and
# after each test respectively.
#
# I have implemented a little hack in setUp(), to prevent the unit tests from using the regular database that I use
# for development. By changing the application configuration to sqlite:// I get SQLAlchemy to use an in-memory SQLite
# database during the tests. The db.create_all() call creates all the database tables.
#
# This is a quick way to create a database from scratch that is useful for testing. For development and
# production I can simply make database tables via migrations

# ------------------------------------------------------------------------------------------------------------------


class TestConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite://'


# noinspection PyArgumentList
class UserModelCase(unittest.TestCase):
    def setUp(self):
        self.app = create_app(TestConfig)
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    # Unit Test to Verify Password Hashing
    def test_password_hashing(self):
        u = User(username='susan')  # Set a test case username
        u.set_password('cat')  # Set a test case password
        self.assertFalse(u.check_password('dog'))  # Test a known false password
        self.assertTrue(u.check_password('cat'))  # Test the correct password

    def test_avatar(self):
        u = User(username='john', email='john@example.com')  # Set a test case username and email
        self.assertEqual(u.avatar(128), ('https://www.gravatar.com/avatar/'  # Compare autogenerated avatar to known
                                         'd4c74594d841139328695756648b6bd6'  # If they are equal than it's a pass
                                         '?d=identicon&s=128'))

    def test_follow(self):
        u1 = User(username='john', email='john@example.com')  # Set a test case for user 1
        u2 = User(username='susan', email='susan@example.com')  # Set a test case for user 2
        db.session.add(u1)  # Add user 1 to the db
        db.session.add(u2)  # Add user 2 to the db
        db.session.commit()  # Commit db changes to memory
        self.assertEqual(u1.followed.all(), [])  # Check that user 1 is not following anyone
        self.assertEqual(u1.followers.all(), [])  # Check that user 2 is not following anyone

        u1.follow(u2)  # Make user 1 (FOLLOWER) follow user 2 (FOLLOWED)
        db.session.commit()  # Commit db changes to memory
        self.assertTrue(u1.is_following(u2))  # Check that user 1 is following user 2
        self.assertEqual(u1.followed.count(), 1)  # Check user 1 FOLLOWING count (should be 1)
        self.assertEqual(u1.followed.first().username, 'susan')  # Check that user 1 is following user "susan"
        self.assertEqual(u2.followers.count(), 1)  # Check user 2 FOLLOWERS count (should be 1)
        self.assertEqual(u2.followers.first().username, 'john')  # Check that user 2 is being followed by "john"

        u1.unfollow(u2)  # Make user 1 UNFOLLOW user 2
        db.session.commit()  # Commit db changes to memory
        self.assertFalse(u1.is_following(u2))  # Check that user 1 is NOT following user 2
        self.assertEqual(u1.followed.count(), 0)  # Check that user 1 has a FOLLOWING count of 0
        self.assertEqual(u2.followers.count(), 0)  # Check that user 2 has a FOLLOWERS count of 0

    def test_follow_posts(self):
        # create four users
        u1 = User(username='john', email='john@example.com')
        u2 = User(username='susan', email='susan@example.com')
        u3 = User(username='mary', email='mary@example.com')
        u4 = User(username='david', email='david@example.com')
        db.session.add_all([u1, u2, u3, u4])

        # create four posts
        now = datetime.utcnow()
        p1 = Post(body="post from john", author=u1,
                  timestamp=now + timedelta(seconds=1))
        p2 = Post(body="post from susan", author=u2,
                  timestamp=now + timedelta(seconds=4))
        p3 = Post(body="post from mary", author=u3,
                  timestamp=now + timedelta(seconds=3))
        p4 = Post(body="post from david", author=u4,
                  timestamp=now + timedelta(seconds=2))
        db.session.add_all([p1, p2, p3, p4])
        db.session.commit()

        # setup the followers
        u1.follow(u2)  # john follows susan
        u1.follow(u4)  # john follows david
        u2.follow(u3)  # susan follows mary
        u3.follow(u4)  # mary follows david
        db.session.commit()

        # check the followed posts of each user
        f1 = u1.followed_posts().all()
        f2 = u2.followed_posts().all()
        f3 = u3.followed_posts().all()
        f4 = u4.followed_posts().all()
        self.assertEqual(f1, [p2, p4, p1])
        self.assertEqual(f2, [p2, p3])
        self.assertEqual(f3, [p3, p4])
        self.assertEqual(f4, [p4])


if __name__ == '__main__':
    unittest.main(verbosity=2)
